# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\Rest\:
        resource: '../src/Controller/Rest'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\Repository\ContactRepositoryInterface: '@App\Repository\ContactRepository'
    App\Producer\ContactProducerInterface: '@old_sound_rabbit_mq.contact_producer'

    App\Consumer\CreateContactConsumer:
        arguments:
            - '@simple_bus.command_bus'
            - '@monolog.logger'

    App\Consumer\UpdateContactConsumer:
        arguments:
            - '@simple_bus.command_bus'
            - '@monolog.logger'

    App\Consumer\DeleteContactConsumer:
        arguments:
            - '@simple_bus.command_bus'
            - '@monolog.logger'

    event_listener.contact_entity:
        class: App\EventListener\ContactEventListener
        tags:
            - { name: doctrine.event_listener, event: onFlush }

    command.contact.create:
        class: App\SimpleBus\Contact\CreateContactCommandHandler
        tags: [{ name: command_handler, handles: App\SimpleBus\Contact\CreateContactCommand }]
        arguments:
            - "@doctrine.orm.entity_manager"
            - "@validator"
            - "@monolog.logger.contact"

    command.contact.update:
        class: App\SimpleBus\Contact\UpdateContactCommandHandler
        tags: [{ name: command_handler, handles: App\SimpleBus\Contact\UpdateContactCommand }]
        arguments:
            - "@doctrine.orm.entity_manager"
            - "@validator"
            - "@monolog.logger.contact"

    command.contact.delete:
        class: App\SimpleBus\Contact\DeleteContactCommandHandler
        tags: [{ name: command_handler, handles: App\SimpleBus\Contact\DeleteContactCommand }]
        arguments:
            - "@doctrine.orm.entity_manager"
            - "@validator"
            - "@monolog.logger.contact"

knp_paginator:
    page_range:                 5          # default page range used in pagination control
    default_options:
        page_name:              page       # page query parameter name
        sort_field_name:        sort       # sort field query parameter name
        sort_direction_name:    direction  # sort direction query parameter name
        distinct:               true       # ensure distinct results, useful when ORM queries are using GROUP BY statements
    template:
        pagination: '@KnpPaginator/Pagination/twitter_bootstrap_v4_pagination.html.twig'     # sliding pagination controls template
